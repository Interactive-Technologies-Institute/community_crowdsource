create table public.signs (
    id bigint generated by default as identity primary key,
    annotated boolean not null,
    annotation text,
    annotation_array integer[] not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    is_annotated integer not null,
    last_changed timestamp not null,
    name varchar(255) not null,
    selected boolean not null,
    theme text[] not null,
    video text not null,
    written_annotation text[], 
    user_id uuid references public.profiles not null
);


-- Storage Buckets
insert into storage.buckets (id, name, public, allowed_mime_types)
values ('signs', 'Signs', true, '{"video/*"}');
-- RLS policies
alter table public.signs enable row level security;
create policy "Allow users to read their own signs" on public.signs for
select using (auth.uid() = user_id);
create policy "Allow users to create their own signs" on public.signs for
insert with check (
    (
        select authorize('signs.create')
    )
    and auth.uid() = user_id
);
create policy "Allow users to update their own signs" on public.signs for
update using (
		(
			select authorize('signs.update')
		)
		and auth.uid() = user_id
	);
create policy "Allow users to delete their own signs" on public.events for delete using (
	(
		select authorize('signs.delete')
	)
	and auth.uid() = user_id
);
create policy "Allow users to upload videos for their signs" on storage.objects for
insert to authenticated with check (bucket_id = 'signs');